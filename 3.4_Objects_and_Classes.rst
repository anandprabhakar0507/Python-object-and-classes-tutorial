


PYTHON OBJECTS AND CLASSES

.. raw:: html

   </h1>

Welcome!
========

Objects in programming are like objects in real life. Like life, there
are different classes of objects. In this notebook, we will create two
classes called Circle and Rectangle. By the end of this notebook, you
will have a better idea about :

-what a class is

-what an attribute is

-what a method is

Don’t worry if you don’t get it the first time, as much of the
terminology is confusing. Don’t forget to do the practice tests in the
notebook.

Introduction
~~~~~~~~~~~~

Creating a Class
^^^^^^^^^^^^^^^^

The first part of creating a class is giving it a name: In this
notebook, we will create two classes, Circle and Rectangle. We need to
determine all the data that make up that class, and we call that an
attribute. Think about this step as creating a blue print that we will
use to create objects. In figure 1 we see two classes, circle and
rectangle. Each has their attributes, they are variables. The class
circle has the attribute radius and colour, while the rectangle has the
attribute height and width. Let’s use the visual examples of these
shapes before we get to the code, as this will help you get accustomed
to the vocabulary.

.. raw:: html

   <h4 align=center>

Figure 1: Classes circle and rectangle, and each has their own attributes. The class circle has the attribute radius and colour, the rectangle has the attribute height and width.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Instances of a Class: Objects and Attributes
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

An instance of an object is the realisation of a class, and in figure 2
we see three instances of the class circle. We give each object a name:
red circle, yellow circle and green circle. Each object has different
attributes, so let's focus on the attribute of colour for each object.

.. raw:: html

   <h4 align=center>

Figure 2: Three instances of the class circle or three objects of type
circle.

The colour attribute for the red circle is the colour red, for the green
circle object the colour attribute is green, and for the yellow circle
the colour attribute is yellow.

Methods
^^^^^^^

Methods give you a way to change or interact with the object; they are
functions that interact with objects. For example, let’s say we would
like to increase the radius by a specified amount of a circle. We can
create a method called **add\_radius(r)** that increases the radius by
**r**. This is shown in figure 3, where after applying the method to the
"orange circle object", the radius of the object increases accordingly.
The “dot” notation means to apply the method to the object, which is
essentially applying a function to the information in the object.

.. raw:: html

   <h4 align=center>

Figure 3: Applying the method “add\_radius” to the object orange circle
object .

Creating a Class
================

Now we are going to create a class circle, but first, we are going to
import a library to draw the objects:

.. code:: python

    import matplotlib.pyplot as plt
    %matplotlib inline  


The first step in creating your own class is to use the **class**
keyword, then the name of the class as shown in Figure 4. In this course
the class parent will always be object:

.. raw:: html

   <h4 align=center>

Figure 4: Three instances of the class circle or three objects of type
circle.

The next step is a special method called a constructor ****init****,
which is used to initialize the object. The input are data attributes.
The term **self** contains all the attributes in the set. For example
the **self.color** gives the value of the attribute colour and
**self.radius** will give you the radius of the object. We also have the
method **add\_radius()** with the parameter **r**, the method adds the
value of **r** to the attribute radius. To access the radius we use the
sintax **self.radius**. The labeled syntax is summarized in Figure 5:

.. raw:: html

   <h4 align=center>

Figure 5: Labeled syntax of the object circle.

The actual object is shown below. We include the method drawCircle to
display the image of a circle. We set the default radius to 3 and the
default colour to blue:

.. code:: python

    
    class Circle(object):
        
        def __init__(self,radius=3,color='blue'):
            
            self.radius=radius
            self.color=color 
        
        def add_radius(self,r):
            
            self.radius=self.radius+r
            return(self.radius)
        def drawCircle(self):
            
            plt.gca().add_patch(plt.Circle((0, 0), radius=self.radius, fc=self.color))
            plt.axis('scaled')
            plt.show()  

Creating an instance of a class Circle
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Let’s create the object **RedCircle** of type Circle to do the
following:

.. code:: python

    RedCircle=Circle(10,'red')

We can use the **dir** command to get a list of the object's methods.
Many of them are default Python methods.

.. code:: python

    dir(RedCircle)

We can look at the data attributes of the object:

.. code:: python

    RedCircle.radius

.. code:: python

    RedCircle.color

We can change the object's data attributes:

.. code:: python

    RedCircle.radius=1

.. code:: python

    RedCircle.radius

We can draw the object by using the method **drawCircle()**:

.. code:: python

    RedCircle.drawCircle()

We can increase the radius of the circle by applying the method
**add\_radius()**. Let increases the radius by 2 and then by 5:

.. code:: python

    print('Radius of object:',RedCircle.radius)
    RedCircle.add_radius(2)
    print('Radius of object of after applying the method add_radius(2):',RedCircle.radius)
    RedCircle.add_radius(5)
    print('Radius of object of after applying the method add_radius(5):',RedCircle.radius)

Let’s create a blue circle. As the default colour is blue, all we have
to do is specify what the radius is:

.. code:: python

    BlueCircle=Circle(radius=100)

As before we can access the attributes of the instance of the class by
using the dot notation:

.. code:: python

    BlueCircle.radius

.. code:: python

    BlueCircle.color

We can draw the object by using the method **drawCircle()**:

.. code:: python

    BlueCircle.drawCircle()

Compare the x and y axis of the figure to the figure for **RedCircle**;
they are different.

The Rectangle Class
~~~~~~~~~~~~~~~~~~~

Let's create a class rectangle with the attributes of height, width and
colour. We will only add the method to draw the rectangle object:

.. code:: python

    class Rectangle(object):
        
        def __init__(self,width=2,height =3,color='r'):
            self.height=height 
            self.width=width
            self.color=color
        
        def drawRectangle(self):
            import matplotlib.pyplot as plt
            plt.gca().add_patch(plt.Rectangle((0, 0),self.width, self.height ,fc=self.color))
            plt.axis('scaled')
            plt.show()

Let’s create the object **SkinnyBlueRectangle** of type Rectangle. Its
width will be 2 and height will be 3, and the colour will be blue:

.. code:: python

    SkinnyBlueRectangle= Rectangle(2,10,'blue')

As before we can access the attributes of the instance of the class by
using the dot notation:

.. code:: python

    SkinnyBlueRectangle.height 

.. code:: python

    SkinnyBlueRectangle.width

.. code:: python

    SkinnyBlueRectangle.color

We can draw the object:

.. code:: python

    SkinnyBlueRectangle.drawRectangle()

Let’s create the object “FatYellowRectangle” of type Rectangle :

.. code:: python

    FatYellowRectangle = Rectangle(20,5,'yellow')

We can access the attributes of the instance of the class by using the
dot notation:

.. code:: python

    FatYellowRectangle.height 

.. code:: python

    FatYellowRectangle.width

.. code:: python

    FatYellowRectangle.color

We can draw the object:

.. code:: python

    FatYellowRectangle.drawRectangle()



About the Authors:
==================

`Joseph
Santarcangelo <https://www.linkedin.com/in/joseph-s-50398b136/>`__ has a
PhD in Electrical Engineering, his research focused on using machine
learning, signal processing, and computer vision to determine how videos
impact human cognition. Joseph has been working for IBM since he
completed his PhD.

.. raw:: html

   <hr>

Copyright © 2017
`Cognitiveclass.ai <https://cognitiveclass.ai/?utm_source=bducopyrightlink&utm_medium=dswb&utm_campaign=bdu>`__.
This notebook and its source code are released under the terms of the
`MIT License <https://bigdatauniversity.com/mit-license/>`__.​
